// PORTA.0 : CLK
// PORTA.1 : MOSI
// PORTA.2 : MISO
// Memory Address : 0x20002000





SIGNAL void spi_gpio_at25020b(){
  int i;
  char init;
  char state_spi;
  char read_state;
  unsigned char input_data_spi;
  unsigned char output_data_spi;
  unsigned char spi_clock_count;
  char rising_edge;
  char rising_edge_init;
  unsigned int BASE_ADDRESS;
  unsigned int byte_address;
  unsigned int write_data;
  unsigned char r_byte;
  unsigned char status_register;
  char write_read_status;
  char address_a8;

  init=0;
  rising_edge = 0;
  rising_edge_init = 0;
	
  input_data_spi = 0;
  output_data_spi = 0;

  spi_clock_count = 0;

  BASE_ADDRESS = 0x20002000;
  byte_address = 0;
  write_data = 0;

  state_spi = 1;  //  1 : INSTRUCTION

  read_state = 0;
  r_byte = 0;

  status_register = 0;
  write_read_status = 0;

  address_a8 = 0;


  for(i=0;i<256;i++){
    _wbyte(BASE_ADDRESS + i, i);
  }

  printf("Start Read/Write AT25010B\n");
	
  while(1){

    if(init == 0)
      init = 1;
    else 
      wwatch (PORTA);

    if( !(PORTA & 0x01) ){
      rising_edge_init = 1;
    }
    else if( PORTA & 0x01 )
    {
      if(rising_edge_init == 1)
        rising_edge = 1;
      else 
        rising_edge = 0;
    }


    if(rising_edge == 1){
      rising_edge = 0;
      rising_edge_init = 0;

      //printf("Byte spi_clock_count = %d\n",spi_clock_count);

      // for input data
      if(PORTA & 0x02){
        input_data_spi <<= 1;
        input_data_spi |= 0x01; 
      }
      else
        input_data_spi <<= 1;

      // for output data
      if( output_data_spi & (0x80 >> spi_clock_count) )
        PORTA |= 0x04;
      else
        PORTA &= ~0x04;


      if(spi_clock_count == 7){
        output_data_spi = 0;

        switch(state_spi){
          case 1: // 1=INSTRUCTION
            printf("\nstate_spi : [ INSTRUCTION ]\n");
            
            if(input_data_spi == 0x06 || input_data_spi == 0x0E){  // WREN = 0x06
            status_register |= 0x02;
            printf("Set Write Enable Latch\n");
            }
            else if(input_data_spi == 0x04 || input_data_spi == 0x0C){  // WRDI = 0x04
              status_register &= ~0x02;
              printf("Reset Write Enable Latch\n");

            }
            else if(input_data_spi == 0x01 || input_data_spi == 0x09){  // WRSR = 0x01
              printf("Write Status Register\n");
              state_spi = 5;  // 4 = WRITE/READ_STATUS
              write_read_status = 1;  // 1 : write status
            }
             else if(input_data_spi == 0x05 || input_data_spi == 0x0D){  // RDSR = 0x05
              printf("Read Status Register\n");
              state_spi = 5;  // 4 = WRITE/READ_STATUS
              write_read_status = 0;  // 0 : read status              
              output_data_spi = status_register;

            }         
            else if(input_data_spi == 0x03 || input_data_spi == 0x0B){  // READ = 0x03
              printf("Read Data from Memory array\n");
              
              if(input_data_spi & 0x08) {
                address_a8 = 1;
                printf("READ : MSB Address bit A8 = 1\n");
              }
              else
                address_a8 = 0;

              read_state = 1;
              state_spi = 2;  // 2 = BYTE_ADDRESS
            }
            else if(input_data_spi == 0x02 || input_data_spi == 0x0A){  // WRITE = 0x02
              printf("Write Data from Memory array\n");

              if(input_data_spi & 0x08) {
                address_a8 = 1;
                printf("WRITE : MSB Address bit A8 = 1\n");
              }
              else
                address_a8 = 0;

              state_spi = 2;  // 2 = BYTE_ADDRESS
            }            

            break;

          case 2: // 2 = BYTE_ADDRESS
            printf("\nstate_spi : [ BYTE_ADDRESS ]\n");

            byte_address = BASE_ADDRESS + input_data_spi + address_a8*256;
            printf("Byte Address : 0x%08x(%d)\n",byte_address, input_data_spi);

            if(read_state == 1){
              r_byte = _rbyte(byte_address);
              output_data_spi = r_byte;
              //output_data_spi = 0xaa;
              printf("output_data_spi : 0x%02x\n",output_data_spi);

              state_spi = 4;  // 4 = READ_DATA

            }
            else
              state_spi = 3;  // 3 = WRITE_DATA
            
            break;

          case 3: // 3 = WRITE_DATA
            printf("\nstate_spi : [ WRITE_DATA ]\n");

            printf("input_data_spi : 0x%02x\n",input_data_spi);

            if(status_register & 0x02){
              write_data = input_data_spi;
              _wbyte(byte_address, write_data);

            }
            else{
              printf("Wirte Enable bit is not set\n");
            }

            state_spi = 1;  // 1 = INSTRUCTION

            break;

          case 4: // 4 = READ_DATA
            printf("\nstate_spi : [ READ_DATA ]\n");

            state_spi = 1;  // 1 = INSTRUCTION
            break;
          case 5: // 5 = WRITE/READ STATUS
            if(write_read_status == 1){
              printf("\nstate_spi : [ WRITE_STATUS ]\n");
              status_register = input_data_spi & 0x0c;
              printf("status_register : 0x%02x\n",status_register);

            }
            else{
              printf("\nstate_spi : [ READ_STATUS ]\n");

            }
            state_spi = 1;  // 1 = INSTRUCTION
            break;

          default : 
            break;

        }
        
      }

      spi_clock_count++;
      if(spi_clock_count > 7) spi_clock_count = 0;      
  }

  }
}

DEFINE BUTTON "SPI_GPIO(AT25020B)", "spi_gpio_at25020b()"